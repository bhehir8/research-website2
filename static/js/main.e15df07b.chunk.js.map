{"version":3,"sources":["components/HomePage.js","components/Minorities.js","components/Suggestions.js","components/NavBar.js","components/Footer.js","App.js","serviceWorker.js","index.js","Brendan_web.png","Northeastern_University_Logo_full.png","logo.svg"],"names":["HomePage","class","Jumbotron","fluid","Container","React","Component","Minorities","Suggestions","Navbar","bg","variant","expand","Brand","src","logo","width","height","className","Toggle","aria-controls","Collapse","id","Nav","Link","href","Footer","color","Date","getFullYear","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"wQAUqBA,E,uKAEf,OACI,yBAAKC,MAAM,aAIrB,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,KACE,2FAIJ,8BAYA,iqE,GAzBsCC,IAAMC,WCHvBC,E,uKAEf,OACI,yBAAKN,MAAM,iBAKrB,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,KACE,6DAIJ,kD,GAdwCC,IAAMC,WCAzBE,E,uKAEf,OACI,yBAAKP,MAAM,oBAKrB,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,KACE,6CAGJ,gD,GAbyCC,IAAMC,W,iCCC1BN,E,uKAEf,OACN,kBAACS,EAAA,EAAD,CAAQC,GAAG,QAAQC,QAAQ,QAAQC,OAAO,MACtC,kBAACH,EAAA,EAAOI,MAAR,KACE,yBACEC,IAAKC,IACLC,MAAM,MACNC,OAAO,KACPC,UAAU,8BAGd,kBAACT,EAAA,EAAOU,OAAR,CAAeC,gBAAc,qBAC7B,kBAACX,EAAA,EAAOY,SAAR,CAAiBC,GAAG,oBAChB,kBAACC,EAAA,EAAD,CAAKL,UAAU,WACf,kBAACK,EAAA,EAAIC,KAAL,CAAUC,KAAK,sBAAf,QACA,kBAACF,EAAA,EAAIC,KAAL,CAAUC,KAAK,iCAAf,+BASC,kBAACF,EAAA,EAAIC,KAAL,CAAUC,KAAK,kCAAf,sB,GAzB6BpB,IAAMC,WCJvBoB,E,uKAEjB,OACJ,kBAAC,IAAD,CAAWC,MAAM,MAAMT,UAAU,yBAC3B,kBAAC,IAAD,CAAcf,OAAK,EAACe,UAAU,4BAC5B,kBAAC,IAAD,KAEE,kBAAC,IAAD,KACE,wBAAIA,UAAU,SAAd,iBACA,8EAKF,kBAAC,IAAD,KACE,wBAAIA,UAAU,SAAd,WACA,4BAEE,2DAQR,yBAAKA,UAAU,qCACb,kBAAC,IAAD,CAAcf,OAAK,GAAnB,SACU,IAAIyB,MAAOC,cADrB,oB,GA3B4BxB,IAAMC,W,eC4B3BwB,MApBf,WACE,OACE,yBAAKZ,UAAU,OACb,kBAAC,EAAD,MACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,qBAAqBC,UAAWjC,IAClD,kBAAC,IAAD,CAAOgC,KAAK,gCAAgCC,UAAW1B,IACvD,kBAAC,IAAD,CAAOyB,KAAK,iCAAiCC,UAAWzB,MAG5D,kBAAC,EAAD,QCXU0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,wCEzI5BC,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,+D,6ECA3CD,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.e15df07b.chunk.js","sourcesContent":["import React from 'react';\r\nimport brendan from '../Brendan_web.png';\r\nimport NavDropdown from 'react-bootstrap/NavDropdown';\r\nimport '../custom.scss';\r\nimport 'mdbreact/dist/css/mdb.css'\r\nimport Jumbotron from 'react-bootstrap/Jumbotron';\r\nimport Container from 'react-bootstrap/Container';\r\nimport { MDBCol, MDBContainer, MDBRow, MDBFooter } from \"mdbreact\";\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nexport default class HomePage extends React.Component {\r\n    render() {\r\n      return (\r\n          <div class=\"Home-Page\">\r\n\r\n    {/* <strong className=\"title\">The Ethical Dilemma of Automation\r\nReplacing the Workforce</strong> */}\r\n<Jumbotron fluid>\r\n  <Container>\r\n    <h1>The Ethical Dilemma of Automation\r\n        Replacing the Workforce</h1>\r\n  </Container>\r\n</Jumbotron>\r\n<main>\r\n{/* <h2 align=\"left\">Job Polarization</h2> */}\r\n{/*<Card>\r\n<Card.Header><h3>Job Polarization</h3></Card.Header>\r\n  <Card.Body>This is some text within a card body.</Card.Body>\r\n</Card>\r\n\r\n<Card>\r\n<Card.Header><h3>Ethical Dilemma</h3></Card.Header>\r\n  <Card.Body>This is some text within a card body.</Card.Body>\r\n</Card>*/}\r\n\r\n<p>It seems like every day we are moving closer to a society run by robots. With self-driving cars, increasingly automated manufacturing lines, and even online customer service Chabot that can answer seemingly any question, jobs that used to be performed by humans are becoming autonomous. Fortunately, most experts agree that this will not lead to mass unemployment, however, weâ€™ll see a more polarized workforce. The idea is that robots and increasingly sophisticated software are poised to replace the jobs held by middle skilled individuals. These jobs include, manufacturers, office clerks, and researchers & data entry. The automation of these middle skilled jobs will make them more efficient, and as a result, there will be an increased demand for high skilled level positions such as managers, technical professionals. These jobs usually require college degrees in order to be qualified. Since these high skilled and high paying jobs are increasing for those with the credentials, there is increased demand for lower skilled jobs such as waiters, retail workers, and entertainment will increase. These is because the high skilled employees will be afforded with more expandable income and time. As a result, two very different classifications are created. The high paying, high skilled jobs at the top, and the low paying, and low skilled jobs at the bottom.\r\nThis job polarization brings about serious ethical concerns. The most obvious being the huge inequality in wages and opportunity. Those who hold high paying jobs can afford to give their children a higher quality of education, and as a result, those kids go on to fill high paying jobs. On the other end, those who hold low paying jobs cannot afford the same level of education for their children, which puts them at a major disadvantage to attain the high paying jobs. This is the cycle of poverty, which is nothing new. However, by eliminating the middle skilled jobs, it makes it much more difficult to escape poverty.\r\nThis is even more concerning when considering that the already marginalized minority populations are poised to suffer the most as a result. Navigate through the tabs to learn more.\r\n</p>\r\n\r\n</main>\r\n    </div>\r\n      )}}\r\n","import React from 'react';\r\nimport '../custom.scss';\r\nimport 'mdbreact/dist/css/mdb.css'\r\nimport Jumbotron from 'react-bootstrap/Jumbotron';\r\nimport Container from 'react-bootstrap/Container';\r\nimport { MDBCol, MDBContainer, MDBRow, MDBFooter } from \"mdbreact\";\r\n\r\nexport default class Minorities extends React.Component {\r\n    render() {\r\n      return (\r\n          <div class=\"Minority-Page\">\r\n\r\n\r\n    {/* <strong className=\"title\">The Ethical Dilemma of Automation\r\nReplacing the Workforce</strong> */}\r\n<Jumbotron fluid>\r\n  <Container>\r\n    <h1>Systemic Racism & Education\r\n</h1>\r\n  </Container>\r\n</Jumbotron>\r\n<p> Hello Mother </p>\r\n\r\n\r\n    </div>\r\n      )}}\r\n","import React from 'react';\r\nimport '../custom.scss';\r\nimport 'mdbreact/dist/css/mdb.css'\r\nimport Jumbotron from 'react-bootstrap/Jumbotron';\r\nimport Container from 'react-bootstrap/Container';\r\nimport { MDBCol, MDBContainer, MDBRow, MDBFooter } from \"mdbreact\";\r\n\r\nexport default class Suggestions extends React.Component {\r\n    render() {\r\n      return (\r\n          <div class=\"Suggestions-Page\">\r\n\r\n\r\n    {/* <strong className=\"title\">The Ethical Dilemma of Automation\r\nReplacing the Workforce</strong> */}\r\n<Jumbotron fluid>\r\n  <Container>\r\n    <h1>Suggestions</h1>\r\n  </Container>\r\n</Jumbotron>\r\n<p> Hey Pickle </p>\r\n\r\n    </div>\r\n      )}}\r\n","import React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport FormControl from 'react-bootstrap/Form';\r\nimport logo from '../Northeastern_University_Logo_full.png';\r\n\r\nexport default class HomePage extends React.Component {\r\n    render() {\r\n      return (\r\n<Navbar bg=\"light\" variant=\"light\" expand=\"lg\">\r\n    <Navbar.Brand>\r\n      <img\r\n        src={logo}\r\n        width=\"120\"\r\n        height=\"40\"\r\n        className=\"d-inline-block align-top\"\r\n      />\r\n    </Navbar.Brand>\r\n    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"mr-auto\">\r\n        <Nav.Link href=\"/research-website2\">Home</Nav.Link>\r\n        <Nav.Link href=\"/research-website2/minorities\">Systemic Racism & Education\r\n</Nav.Link>\r\n        {/* <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\r\n            <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\r\n            <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\r\n            <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\r\n            <NavDropdown.Divider />\r\n            <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\r\n        </NavDropdown> */}\r\n         <Nav.Link href=\"/research-website2/suggestions\">Suggestions</Nav.Link>\r\n\r\n        </Nav>\r\n\r\n    </Navbar.Collapse>\r\n    </Navbar>\r\n      )\r\n    }\r\n}\r\n","import { MDBCol, MDBContainer, MDBRow, MDBFooter } from \"mdbreact\";\r\nimport brendan from '../Brendan_web.png';\r\nimport React from 'react';\r\n\r\nexport default class Footer extends React.Component{\r\nrender(){\r\n    return(\r\n<MDBFooter color=\"red\" className=\"font-small pt-4 mt-4 \">\r\n      <MDBContainer fluid className=\"text-center text-md-left\">\r\n        <MDBRow>\r\n\r\n          <MDBCol >\r\n            <h5 className=\"title\">Brendan Hehir</h5>\r\n            <p>\r\n              Advanced Writting in the Technical Professions\r\n            </p>\r\n\r\n          </MDBCol>\r\n          <MDBCol >\r\n            <h5 className=\"title\">Contact</h5>\r\n            <ul>\r\n              {/* <li className=\"list-unstyled\"> */}\r\n              <p>\r\n              hehir.b@northeastern.edu\r\n                </p>\r\n              {/* </li> */}\r\n            </ul>\r\n          </MDBCol>\r\n        </MDBRow>\r\n      </MDBContainer>\r\n      <div className=\"footer-copyright text-center py-3\">\r\n        <MDBContainer fluid>\r\n          &copy; {new Date().getFullYear()} Copyright\r\n        </MDBContainer>\r\n      </div>\r\n    </MDBFooter>\r\n    )\r\n}\r\n}\r\n","import React, {Component} from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport HomePage from './components/HomePage';\r\nimport Minorities from './components/Minorities';\r\nimport Suggestions from './components/Suggestions';\r\nimport NavBar from './components/NavBar';\r\nimport Footer from './components/Footer';\r\n\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <NavBar/>\r\n          <BrowserRouter>\r\n              <Switch>\r\n              <Route exact path=\"/research-website2\" component={HomePage} />\r\n              <Route path=\"/research-website2/minorities\" component={Minorities} />\r\n              <Route path=\"/research-website2/suggestions\" component={Suggestions} />\r\n              </Switch>\r\n          </BrowserRouter>\r\n          <Footer/>\r\n\r\n          </div>\r\n\r\n\r\n  );\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/Brendan_web.380246f3.png\";","module.exports = __webpack_public_path__ + \"static/media/Northeastern_University_Logo_full.0776fbb2.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}